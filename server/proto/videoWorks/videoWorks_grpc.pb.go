// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: videoWorks.proto

package videoWorks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoWorks_GetVideoWorks_FullMethodName  = "/VideoWorks/GetVideoWorks"
	VideoWorks_FindVideoWorks_FullMethodName = "/VideoWorks/FindVideoWorks"
	VideoWorks_AddVideoWorks_FullMethodName  = "/VideoWorks/AddVideoWorks"
)

// VideoWorksClient is the client API for VideoWorks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoWorksClient interface {
	GetVideoWorks(ctx context.Context, in *GetVideoWorksReq, opts ...grpc.CallOption) (*GetVideoWorksRes, error)
	FindVideoWorks(ctx context.Context, in *FindVideoWorksReq, opts ...grpc.CallOption) (*FindVideoWorksRes, error)
	AddVideoWorks(ctx context.Context, in *AddVideoWorksReq, opts ...grpc.CallOption) (*AddVideoWorksRes, error)
}

type videoWorksClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoWorksClient(cc grpc.ClientConnInterface) VideoWorksClient {
	return &videoWorksClient{cc}
}

func (c *videoWorksClient) GetVideoWorks(ctx context.Context, in *GetVideoWorksReq, opts ...grpc.CallOption) (*GetVideoWorksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoWorksRes)
	err := c.cc.Invoke(ctx, VideoWorks_GetVideoWorks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoWorksClient) FindVideoWorks(ctx context.Context, in *FindVideoWorksReq, opts ...grpc.CallOption) (*FindVideoWorksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindVideoWorksRes)
	err := c.cc.Invoke(ctx, VideoWorks_FindVideoWorks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoWorksClient) AddVideoWorks(ctx context.Context, in *AddVideoWorksReq, opts ...grpc.CallOption) (*AddVideoWorksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVideoWorksRes)
	err := c.cc.Invoke(ctx, VideoWorks_AddVideoWorks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoWorksServer is the server API for VideoWorks service.
// All implementations must embed UnimplementedVideoWorksServer
// for forward compatibility.
type VideoWorksServer interface {
	GetVideoWorks(context.Context, *GetVideoWorksReq) (*GetVideoWorksRes, error)
	FindVideoWorks(context.Context, *FindVideoWorksReq) (*FindVideoWorksRes, error)
	AddVideoWorks(context.Context, *AddVideoWorksReq) (*AddVideoWorksRes, error)
	mustEmbedUnimplementedVideoWorksServer()
}

// UnimplementedVideoWorksServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoWorksServer struct{}

func (UnimplementedVideoWorksServer) GetVideoWorks(context.Context, *GetVideoWorksReq) (*GetVideoWorksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoWorks not implemented")
}
func (UnimplementedVideoWorksServer) FindVideoWorks(context.Context, *FindVideoWorksReq) (*FindVideoWorksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindVideoWorks not implemented")
}
func (UnimplementedVideoWorksServer) AddVideoWorks(context.Context, *AddVideoWorksReq) (*AddVideoWorksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideoWorks not implemented")
}
func (UnimplementedVideoWorksServer) mustEmbedUnimplementedVideoWorksServer() {}
func (UnimplementedVideoWorksServer) testEmbeddedByValue()                    {}

// UnsafeVideoWorksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoWorksServer will
// result in compilation errors.
type UnsafeVideoWorksServer interface {
	mustEmbedUnimplementedVideoWorksServer()
}

func RegisterVideoWorksServer(s grpc.ServiceRegistrar, srv VideoWorksServer) {
	// If the following call pancis, it indicates UnimplementedVideoWorksServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoWorks_ServiceDesc, srv)
}

func _VideoWorks_GetVideoWorks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoWorksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoWorksServer).GetVideoWorks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoWorks_GetVideoWorks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoWorksServer).GetVideoWorks(ctx, req.(*GetVideoWorksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoWorks_FindVideoWorks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindVideoWorksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoWorksServer).FindVideoWorks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoWorks_FindVideoWorks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoWorksServer).FindVideoWorks(ctx, req.(*FindVideoWorksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoWorks_AddVideoWorks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVideoWorksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoWorksServer).AddVideoWorks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoWorks_AddVideoWorks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoWorksServer).AddVideoWorks(ctx, req.(*AddVideoWorksReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoWorks_ServiceDesc is the grpc.ServiceDesc for VideoWorks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoWorks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VideoWorks",
	HandlerType: (*VideoWorksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideoWorks",
			Handler:    _VideoWorks_GetVideoWorks_Handler,
		},
		{
			MethodName: "FindVideoWorks",
			Handler:    _VideoWorks_FindVideoWorks_Handler,
		},
		{
			MethodName: "AddVideoWorks",
			Handler:    _VideoWorks_AddVideoWorks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "videoWorks.proto",
}
