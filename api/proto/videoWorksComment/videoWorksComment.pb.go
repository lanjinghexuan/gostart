// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.0
// source: videoWorksComment.proto

package videoWorksComment

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetCommentReplyListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int32                  `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	Pid           int32                  `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommentReplyListReq) Reset() {
	*x = GetCommentReplyListReq{}
	mi := &file_videoWorksComment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentReplyListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentReplyListReq) ProtoMessage() {}

func (x *GetCommentReplyListReq) ProtoReflect() protoreflect.Message {
	mi := &file_videoWorksComment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentReplyListReq.ProtoReflect.Descriptor instead.
func (*GetCommentReplyListReq) Descriptor() ([]byte, []int) {
	return file_videoWorksComment_proto_rawDescGZIP(), []int{0}
}

func (x *GetCommentReplyListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetCommentReplyListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCommentReplyListReq) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type GetCommentReplyListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*CommentP            `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommentReplyListRes) Reset() {
	*x = GetCommentReplyListRes{}
	mi := &file_videoWorksComment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentReplyListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentReplyListRes) ProtoMessage() {}

func (x *GetCommentReplyListRes) ProtoReflect() protoreflect.Message {
	mi := &file_videoWorksComment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentReplyListRes.ProtoReflect.Descriptor instead.
func (*GetCommentReplyListRes) Descriptor() ([]byte, []int) {
	return file_videoWorksComment_proto_rawDescGZIP(), []int{1}
}

func (x *GetCommentReplyListRes) GetData() []*CommentP {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCommentReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkId        int32                  `protobuf:"varint,1,opt,name=WorkId,proto3" json:"WorkId,omitempty"`
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int32                  `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommentReq) Reset() {
	*x = GetCommentReq{}
	mi := &file_videoWorksComment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentReq) ProtoMessage() {}

func (x *GetCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_videoWorksComment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentReq.ProtoReflect.Descriptor instead.
func (*GetCommentReq) Descriptor() ([]byte, []int) {
	return file_videoWorksComment_proto_rawDescGZIP(), []int{2}
}

func (x *GetCommentReq) GetWorkId() int32 {
	if x != nil {
		return x.WorkId
	}
	return 0
}

func (x *GetCommentReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetCommentReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCommentRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*Comment             `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommentRes) Reset() {
	*x = GetCommentRes{}
	mi := &file_videoWorksComment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentRes) ProtoMessage() {}

func (x *GetCommentRes) ProtoReflect() protoreflect.Message {
	mi := &file_videoWorksComment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentRes.ProtoReflect.Descriptor instead.
func (*GetCommentRes) Descriptor() ([]byte, []int) {
	return file_videoWorksComment_proto_rawDescGZIP(), []int{3}
}

func (x *GetCommentRes) GetData() []*Comment {
	if x != nil {
		return x.Data
	}
	return nil
}

type Comment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserName      string                 `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserId        int32                  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	Avator        string                 `protobuf:"bytes,4,opt,name=Avator,proto3" json:"Avator,omitempty"`
	Time          string                 `protobuf:"bytes,7,opt,name=Time,proto3" json:"Time,omitempty"`
	Id            int32                  `protobuf:"varint,9,opt,name=Id,proto3" json:"Id,omitempty"`
	Data          []*CommentP            `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty"`
	HasMore       bool                   `protobuf:"varint,10,opt,name=HasMore,proto3" json:"HasMore,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Comment) Reset() {
	*x = Comment{}
	mi := &file_videoWorksComment_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_videoWorksComment_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_videoWorksComment_proto_rawDescGZIP(), []int{4}
}

func (x *Comment) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Comment) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetAvator() string {
	if x != nil {
		return x.Avator
	}
	return ""
}

func (x *Comment) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Comment) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Comment) GetData() []*CommentP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Comment) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type CommentP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserName      string                 `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserId        int32                  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	Avator        string                 `protobuf:"bytes,4,opt,name=Avator,proto3" json:"Avator,omitempty"`
	PUserId       int32                  `protobuf:"varint,5,opt,name=PUserId,proto3" json:"PUserId,omitempty"`
	PUserName     string                 `protobuf:"bytes,6,opt,name=PUserName,proto3" json:"PUserName,omitempty"`
	Time          string                 `protobuf:"bytes,7,opt,name=Time,proto3" json:"Time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommentP) Reset() {
	*x = CommentP{}
	mi := &file_videoWorksComment_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentP) ProtoMessage() {}

func (x *CommentP) ProtoReflect() protoreflect.Message {
	mi := &file_videoWorksComment_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentP.ProtoReflect.Descriptor instead.
func (*CommentP) Descriptor() ([]byte, []int) {
	return file_videoWorksComment_proto_rawDescGZIP(), []int{5}
}

func (x *CommentP) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CommentP) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CommentP) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentP) GetAvator() string {
	if x != nil {
		return x.Avator
	}
	return ""
}

func (x *CommentP) GetPUserId() int32 {
	if x != nil {
		return x.PUserId
	}
	return 0
}

func (x *CommentP) GetPUserName() string {
	if x != nil {
		return x.PUserName
	}
	return ""
}

func (x *CommentP) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

var File_videoWorksComment_proto protoreflect.FileDescriptor

const file_videoWorksComment_proto_rawDesc = "" +
	"\n" +
	"\x17videoWorksComment.proto\"T\n" +
	"\x16GetCommentReplyListReq\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x14\n" +
	"\x05limit\x18\n" +
	" \x01(\x05R\x05limit\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\x05R\x03pid\"7\n" +
	"\x16GetCommentReplyListRes\x12\x1d\n" +
	"\x04data\x18\x01 \x03(\v2\t.CommentPR\x04data\"Q\n" +
	"\rGetCommentReq\x12\x16\n" +
	"\x06WorkId\x18\x01 \x01(\x05R\x06WorkId\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x14\n" +
	"\x05limit\x18\n" +
	" \x01(\x05R\x05limit\"-\n" +
	"\rGetCommentRes\x12\x1c\n" +
	"\x04data\x18\x01 \x03(\v2\b.CommentR\x04data\"\xcc\x01\n" +
	"\aComment\x12\x1a\n" +
	"\bUserName\x18\x01 \x01(\tR\bUserName\x12\x16\n" +
	"\x06UserId\x18\x02 \x01(\x05R\x06UserId\x12\x18\n" +
	"\aContent\x18\x03 \x01(\tR\aContent\x12\x16\n" +
	"\x06Avator\x18\x04 \x01(\tR\x06Avator\x12\x12\n" +
	"\x04Time\x18\a \x01(\tR\x04Time\x12\x0e\n" +
	"\x02Id\x18\t \x01(\x05R\x02Id\x12\x1d\n" +
	"\x04data\x18\b \x03(\v2\t.CommentPR\x04data\x12\x18\n" +
	"\aHasMore\x18\n" +
	" \x01(\bR\aHasMore\"\xbc\x01\n" +
	"\bCommentP\x12\x1a\n" +
	"\bUserName\x18\x01 \x01(\tR\bUserName\x12\x16\n" +
	"\x06UserId\x18\x02 \x01(\x05R\x06UserId\x12\x18\n" +
	"\aContent\x18\x03 \x01(\tR\aContent\x12\x16\n" +
	"\x06Avator\x18\x04 \x01(\tR\x06Avator\x12\x18\n" +
	"\aPUserId\x18\x05 \x01(\x05R\aPUserId\x12\x1c\n" +
	"\tPUserName\x18\x06 \x01(\tR\tPUserName\x12\x12\n" +
	"\x04Time\x18\a \x01(\tR\x04Time2\x8a\x01\n" +
	"\x11VideoWorksComment\x12,\n" +
	"\n" +
	"GetComment\x12\x0e.GetCommentReq\x1a\x0e.GetCommentRes\x12G\n" +
	"\x13GetCommentReplyList\x12\x17.GetCommentReplyListReq\x1a\x17.GetCommentReplyListResB\x15Z\x13.;videoWorksCommentb\x06proto3"

var (
	file_videoWorksComment_proto_rawDescOnce sync.Once
	file_videoWorksComment_proto_rawDescData []byte
)

func file_videoWorksComment_proto_rawDescGZIP() []byte {
	file_videoWorksComment_proto_rawDescOnce.Do(func() {
		file_videoWorksComment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_videoWorksComment_proto_rawDesc), len(file_videoWorksComment_proto_rawDesc)))
	})
	return file_videoWorksComment_proto_rawDescData
}

var file_videoWorksComment_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_videoWorksComment_proto_goTypes = []any{
	(*GetCommentReplyListReq)(nil), // 0: GetCommentReplyListReq
	(*GetCommentReplyListRes)(nil), // 1: GetCommentReplyListRes
	(*GetCommentReq)(nil),          // 2: GetCommentReq
	(*GetCommentRes)(nil),          // 3: GetCommentRes
	(*Comment)(nil),                // 4: Comment
	(*CommentP)(nil),               // 5: CommentP
}
var file_videoWorksComment_proto_depIdxs = []int32{
	5, // 0: GetCommentReplyListRes.data:type_name -> CommentP
	4, // 1: GetCommentRes.data:type_name -> Comment
	5, // 2: Comment.data:type_name -> CommentP
	2, // 3: VideoWorksComment.GetComment:input_type -> GetCommentReq
	0, // 4: VideoWorksComment.GetCommentReplyList:input_type -> GetCommentReplyListReq
	3, // 5: VideoWorksComment.GetComment:output_type -> GetCommentRes
	1, // 6: VideoWorksComment.GetCommentReplyList:output_type -> GetCommentReplyListRes
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_videoWorksComment_proto_init() }
func file_videoWorksComment_proto_init() {
	if File_videoWorksComment_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_videoWorksComment_proto_rawDesc), len(file_videoWorksComment_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_videoWorksComment_proto_goTypes,
		DependencyIndexes: file_videoWorksComment_proto_depIdxs,
		MessageInfos:      file_videoWorksComment_proto_msgTypes,
	}.Build()
	File_videoWorksComment_proto = out.File
	file_videoWorksComment_proto_goTypes = nil
	file_videoWorksComment_proto_depIdxs = nil
}
