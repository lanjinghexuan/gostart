// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: videoWorksComment.proto

package videoWorksComment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoWorksComment_GetComment_FullMethodName          = "/VideoWorksComment/GetComment"
	VideoWorksComment_GetCommentReplyList_FullMethodName = "/VideoWorksComment/GetCommentReplyList"
)

// VideoWorksCommentClient is the client API for VideoWorksComment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoWorksCommentClient interface {
	GetComment(ctx context.Context, in *GetCommentReq, opts ...grpc.CallOption) (*GetCommentRes, error)
	GetCommentReplyList(ctx context.Context, in *GetCommentReplyListReq, opts ...grpc.CallOption) (*GetCommentReplyListRes, error)
}

type videoWorksCommentClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoWorksCommentClient(cc grpc.ClientConnInterface) VideoWorksCommentClient {
	return &videoWorksCommentClient{cc}
}

func (c *videoWorksCommentClient) GetComment(ctx context.Context, in *GetCommentReq, opts ...grpc.CallOption) (*GetCommentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentRes)
	err := c.cc.Invoke(ctx, VideoWorksComment_GetComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoWorksCommentClient) GetCommentReplyList(ctx context.Context, in *GetCommentReplyListReq, opts ...grpc.CallOption) (*GetCommentReplyListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentReplyListRes)
	err := c.cc.Invoke(ctx, VideoWorksComment_GetCommentReplyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoWorksCommentServer is the server API for VideoWorksComment service.
// All implementations must embed UnimplementedVideoWorksCommentServer
// for forward compatibility.
type VideoWorksCommentServer interface {
	GetComment(context.Context, *GetCommentReq) (*GetCommentRes, error)
	GetCommentReplyList(context.Context, *GetCommentReplyListReq) (*GetCommentReplyListRes, error)
	mustEmbedUnimplementedVideoWorksCommentServer()
}

// UnimplementedVideoWorksCommentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoWorksCommentServer struct{}

func (UnimplementedVideoWorksCommentServer) GetComment(context.Context, *GetCommentReq) (*GetCommentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedVideoWorksCommentServer) GetCommentReplyList(context.Context, *GetCommentReplyListReq) (*GetCommentReplyListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentReplyList not implemented")
}
func (UnimplementedVideoWorksCommentServer) mustEmbedUnimplementedVideoWorksCommentServer() {}
func (UnimplementedVideoWorksCommentServer) testEmbeddedByValue()                           {}

// UnsafeVideoWorksCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoWorksCommentServer will
// result in compilation errors.
type UnsafeVideoWorksCommentServer interface {
	mustEmbedUnimplementedVideoWorksCommentServer()
}

func RegisterVideoWorksCommentServer(s grpc.ServiceRegistrar, srv VideoWorksCommentServer) {
	// If the following call pancis, it indicates UnimplementedVideoWorksCommentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoWorksComment_ServiceDesc, srv)
}

func _VideoWorksComment_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoWorksCommentServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoWorksComment_GetComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoWorksCommentServer).GetComment(ctx, req.(*GetCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoWorksComment_GetCommentReplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentReplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoWorksCommentServer).GetCommentReplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoWorksComment_GetCommentReplyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoWorksCommentServer).GetCommentReplyList(ctx, req.(*GetCommentReplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoWorksComment_ServiceDesc is the grpc.ServiceDesc for VideoWorksComment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoWorksComment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VideoWorksComment",
	HandlerType: (*VideoWorksCommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComment",
			Handler:    _VideoWorksComment_GetComment_Handler,
		},
		{
			MethodName: "GetCommentReplyList",
			Handler:    _VideoWorksComment_GetCommentReplyList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "videoWorksComment.proto",
}
